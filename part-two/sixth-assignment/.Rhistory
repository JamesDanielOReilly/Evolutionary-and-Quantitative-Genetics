ratio.vector = c()
for (i in 1:n) {
ratio = (choose(i, 2) - i)/i
append(ratio.vector, ratio)
}
}
calc.ratio(50)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 1:n) {
ratio = (choose(i, 2) - i)/i
append(ratio.vector, ratio)
}
return(ratio.vector)
}
calc.ratio(50)
calc.ratio <- function(n) {
ratio.vector = vector()
for (i in 1:n) {
ratio = (choose(i, 2) - i)/i
append(ratio.vector, ratio)
}
return(ratio.vector)
}
calc.ratio(50)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 1:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 2:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 3:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 3:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(2, i) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(5, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(5, n) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio(50)
x = c(1:45)
plot(x, ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in range(5:n)) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
ratio.vector = calc.ratio(50)
x = c(1:45)
plot(x, ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in range(5:n)) {
ratio = (choose(i, 2) - i)/i
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
ratio.vector = calc.ratio(50)
plot(ratio.vector)
ratio.vector
calc.ratio <- function(n) {
ratio.vector = c()
for (i in range(5:n)) {
ratio = (choose(i, 2) - i)/i
print(i)
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio
ratio.vector = calc.ratio(50)
plot(ratio.vector)
range(5:50)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
print(i)
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio
ratio.vector = calc.ratio(50)
plot(ratio.vector)
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
print(i)
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio
ratio.vector = calc.ratio(50)
plot(ratio.vector, type='l')
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
print(i)
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio
ratio.vector = calc.ratio(50)
plot(ratio.vector, type='ol')
meanAR <- colMeans(AR$Ar)
meanAR
barplot(meanAR, xlab = 'Population' , ylab = 'Mean allelic richness')
library(adegenet)
library(hierfstat)
library(genetics)
library(pegas)
data <- read.genepop('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/data/stickle.gen')
exp_het <- Hs(data)
sum <- summary(data)
nall <- sum$pop.n.all
pdf(file = "/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/het.pdf")
barplot(exp_het, xlab = 'Population', ylab = 'Heterozygosity')
dev.off()
pdf(file = "/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/nall.pdf")
barplot(nall, xlab = 'Population', ylab = 'Number of alleles')
dev.off()
calc.ratio <- function(n) {
ratio.vector = c()
for (i in 5:n) {
ratio = (choose(i, 2) - i)/i
print(i)
ratio.vector[i-4] <- ratio
}
return(ratio.vector)
}
calc.ratio
ratio.vector = calc.ratio(50)
plot(ratio.vector, type='ol')
data1 <- read.fstat('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/data/stickle.dat')
AR <- allelic.richness(data1)
AR
meanAR <- colMeans(AR$Ar)
meanAR
barplot(meanAR, xlab = 'Population' , ylab = 'Mean allelic richness')
pp <- pairwise.neifst(data1)
pp
dapcstickle <- dapc(data, n.pca = 40, n.da = 5)
dapcstickle
pdf(file = "/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/dapc.pdf")
scatter(dapcstickle)
dev.off()
pdf(file = "/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/cluster.pdf")
clust <- find.clusters(data, n.pca = 100)
dev.off()
as.data.frame(clust$grp)
table(clust$grp, data$pop)
pdf(file = "/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/table.pdf")
table.value(table(clust$grp,data$pop))
dapcstickle <- dapc(data, n.pca = 40, n.da = 5)
dapcstickle
# pdf(file = "/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/first-assignment/dapc.pdf")
scatter(dapcstickle)
# dev.off()
library(adegenet)
data = read.genepop('data/stickle.gen')
data.pop = seppop(data)
data.het = cbind(do.call("c", lapply(data.pop, function(x) mean(summary(x)$Hobs))), do.call("c", lapply(data.pop, function(x) mean(summary(x)$Hexp))) )
colnames(data.het) = c('Observed heterozygosity', 'Expected heterozygosity')
data.het
library(mmod)
diff_stats(data)
library(hierfstat)
genet.dist(data, diploid = T, method = 'WC84')
basic.stats(data)
pp = genet.dist(data, diploid = T, method = 'WC84')
library(corrplot)
corrplot(as.matrix(pp), is.cor = F, type= 'lower', method = "color")
data_hier = data.frame(c(rep('coastal', 49+50+50+46), rep('inland', 50+50+50)), data@pop)
names(data_hier) = c('group', 'pop')
data@other = list(population_hierarchy = data_hier)
strata(data) = data.frame(other(data)$population_hierarchy)
strata(data)
library(poppr)
data2 = popsub(data, blacklist = 'Pop-7')
info_table(data2, plot = TRUE)
data2 = missingno(data2, type = 'genotype')
stickamova = poppr.amova(data2, ~group/pop, within = F)
stickamova
set.seed(1999)
sticksignif = randtest(stickamova, nrepet = 999)
sticksignif
set.seed(1999)
sticksignif = randtest(stickamova, nrepet = 999)
sticksignif
plot(sticksignif)
set.seed(1999)
sticksignif = randtest(stickamova, nrepet = 999)
sticksignif
pdf("tests.pdf")
plot(sticksignif)
dev.off()
devtools::install_github('spflanagan/fsthet_analysis/fsthet')
install.packages("devtools")
devtools::install_github('spflanagan/fsthet_analysis/fsthet')
library(fsthet)
gpop = my.read.genepop('data/stick.pop')
devtools::install_github('spflanagan/fsthet_analysis/fsthet')
library(fsthet)
gpop = my.read.genepop('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/stick.pop')
devtools::install_github('spflanagan/fsthet_analysis/fsthet')
library(fsthet)
gpop = my.read.genepop('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/stick_old.pop')
fsts<-calc.actual.fst(gpop)
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19)
devtools::install_github('spflanagan/fsthet_analysis/fsthet')
library(fsthet)
gpop = my.read.genepop('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/stick_old.pop')
fsts<-calc.actual.fst(gpop)
devtools::install_github('spflanagan/fsthet_analysis/fsthet', force = TRUE)
library(fsthet)
gpop = my.read.genepop('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/stick_old.pop')
fsts<-calc.actual.fst(gpop)
fsts<-calc.actual.fst(gpop)
quant.out1 = as.data.frame(t(replicate(100, fst.boot(gpop,bootstrap=FALSE, fst.choice="betahat", min.per.bin=10))))
quant.out2 = as.data.frame(t(replicate(100, fst.boot(gpop,bootstrap=FALSE, fst.choice="theta", min.per.bin=10))))
quant.out3 = as.data.frame(t(replicate(100, fst.boot(gpop,bootstrap=FALSE, fst.choice="var", min.per.bin=10))))
quant.out4 = as.data.frame(t(replicate(100, fst.boot(gpop,bootstrap=FALSE, fst.choice="fst", min.per.bin=10))))
outliers1<-find.outliers(fsts,boot.out=quant.out1)
outliers2<-find.outliers(fsts,boot.out=quant.out2)
outliers3<-find.outliers(fsts,boot.out=quant.out3)
outliers4<-find.outliers(fsts,boot.out=quant.out4)
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19,col="black")
points(outliers1$Ht,outliers1$Fst,xlab="Ht",ylab="Fst",pch=19,col="pink")
points(outliers2$Ht,outliers2$Fst,xlab="Ht",ylab="Fst",pch=19,col="red")
points(outliers3$Ht,outliers3$Fst,xlab="Ht",ylab="Fst",pch=19,col="blue")
points(outliers4$Ht,outliers4$Fst,xlab="Ht",ylab="Fst",pch=19,col="green")
install.packages("BiocManager")
devtools::install_github("whitlock/OutFLANK")
library(OutFLANK)
install.packages("qvalue")
BiocManager::install("qvalue")
library(qvalue)
library(vcfR)
BiocManager::install("qvalue")
install.packages(c('vcfR', 'plyr', 'processx'))
library(qvalue)
library(vcfR)
install.packages(c("vcfR", "plyr", "processx"))
install.packages(c("vcfR", "plyr", "processx"))
BiocManager::install("qvalue")
install.packages(c('vcfR', 'plyr', 'processx'))
library(qvalue)
library(vcfR)
library(plyr)
library(processx) ### should be atleast 3.4.0
devtools::install_github("whitlock/OutFLANK")
library(OutFLANK)
source(ʺread-plink-bed.Rʺ)
source('read-plink-bed.R')
source("read-plink-bed.R")
source("read-plink-bed.R")
source("/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/read-plink-bed.R")
snps = read.plink('pl1')# SNPS
snps = read.plink('/data/pl1')# SNPS
snps = read.plink("/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1")# SNPS
snps = read.plink('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1')# SNPS
markers = read.table('pl1.bim', h = F)# Markers
snps = read.plink('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1')# SNPS
markers = read.table('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1.bim', h = F)# Markers
pops = read.table('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1.tsv', h = F)# populations
snps = read.plink('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1')# SNPS
markers = read.table('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pl1.bim', h = F)# Markers
pops = read.table('/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/fifth-assignment/data/pops.tsv', h = F)# populations
snps[is.na(snps)] = 9
t2 = apply(snps, 2, function(x){sum(x == 9)/length(x)})#we are calculating what percentage of the genotypes in each SNP is missing
snps2 = snps[, t2 <= .25]# we are pruning the data so that we keep SNPs missing in no more than 25% of the data
ofl = MakeDiploidFSTMat(snps2, as.character(markers[t2 <= .25,2]), as.character(pops[,2]))# we are making a Fst matrix
outR = OutFLANK(ofl, NumberOfSamples = 4)
OutFLANKResultsPlotter(outR)
OutFLANKResultsPlotter(outR)
OutFLANKResultsPlotter(outR, Hmin = 0.01, Zoom = T)
head(outR$results, n = 10)
t2 = apply(snps, 2, function(x){sum(x == 9)/length(x)})#we are calculating what percentage of the genotypes in each SNP is missing
snps2 = snps[, t2 <= .40]# we are pruning the data so that we keep SNPs missing in no more than 25% of the data
ofl = MakeDiploidFSTMat(snps2, as.character(markers[t2 <= .40 ,2]), as.character(pops[, 2]))# we are making a Fst matrix
outR = OutFLANK(ofl, NumberOfSamples=4)
OutFLANKResultsPlotter(outR)
OutFLANKResultsPlotter(outR, Hmin = 0.01, Zoom = T)
head(outR$results, n = 10)
which(outR$results$OutlierFlag=='TRUE')
t2 = apply(snps, 2, function(x){sum(x == 9)/length(x)})#we are calculating what percentage of the genotypes in each SNP is missing
snps2 = snps[, t2 <= .10]# we are pruning the data so that we keep SNPs missing in no more than 25% of the data
ofl = MakeDiploidFSTMat(snps2, as.character(markers[t2 <= .10 ,2]), as.character(pops[, 2]))# we are making a Fst matrix
outR = OutFLANK(ofl, NumberOfSamples=4)
t2 = apply(snps, 2, function(x){sum(x == 9)/length(x)})#we are calculating what percentage of the genotypes in each SNP is missing
snps2 = snps[, t2 <= .25]# we are pruning the data so that we keep SNPs missing in no more than 25% of the data
ofl = MakeDiploidFSTMat(snps2, as.character(markers[t2 <= .25 ,2]), as.character(pops[, 2]))# we are making a Fst matrix
outR = OutFLANK(ofl, NumberOfSamples=4)
OutFLANKResultsPlotter(outR)
OutFLANKResultsPlotter(outR, Hmin = 0.01, Zoom = T)
t2 = apply(snps, 2, function(x){sum(x == 9)/length(x)})#we are calculating what percentage of the genotypes in each SNP is missing
snps2 = snps[, t2 <= .1]# we are pruning the data so that we keep SNPs missing in no more than 25% of the data
ofl = MakeDiploidFSTMat(snps2, as.character(markers[t2 <= .1 ,2]), as.character(pops[, 2]))# we are making a Fst matrix
outR = OutFLANK(ofl, NumberOfSamples=4, LeftTrimFraction = 0.1)
OutFLANKResultsPlotter(outR)
OutFLANKResultsPlotter(outR, Hmin = 0.01, Zoom = T)
# install DESeq2
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
# read count matrix and metadata
setwd("/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/sixth-assignment")
count_data <- read.table("countmatrix.txt", row.names = 1, header = T)
str(count_data)
design <- read.table("metadata.txt", row.names = 1, header = T)
design$treat <- factor(design$treat)
design$lat <- factor(design$lat)
group2<-factor(design$group2)
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = design,
design = ~ group2)
# BiocManager::install("DESeq2")
BiocManager::install('EnhancedVolcano')
# BiocManager::install("DESeq2")
BiocManager::install('EnhancedVolcano')
install.packages('pheatmap')
library(DESeq2)
library(ggplot2)
library(EnhancedVolcano)
library(pheatmap)
# read count matrix and metadata
setwd("/home/james/Documents/leuven/second-year/Evolutionary-and-Quantitative-Genetics/part-two/sixth-assignment")
count_data <- read.table("count_data_exercise.txt", row.names = 1, header = T)
str(count_data)
design <- read.table("design.txt", row.names = 1, header = T)
design$treat <- factor(design$treat)
design$lat <- factor(design$lat)
group2<-factor(design$group2)
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = design,
design = ~ group2)
dds <- DESeq(dds)
# First apply a variance stabilizing transformation on dds
vsd=vst(dds)
# PCA
pcaDataDEG <- plotPCA(vsd,intgroup=c("treat","lat"),returnData=TRUE)
percentVar <- round(100 * attr(pcaDataDEG, "percentVar"))
ggplot(pcaDataDEG, aes(x = PC1, y = PC2, color = treat, shape = lat)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
# N24 vs N20
res_N24_vsN20 <- results(dds, contrast = c("group2", "N24", "N20"))
sig_N24_vsN20 <- res_N24_vsN20[ which(res_N24_vsN20$padj < 0.05 ), ]
# S24 vs S20
res_S24_vsS20 <- results(dds, contrast = c("group2", "S24", "S20"))
sig_S24_vsS20 <- res_S24_vsS20[ which(res_S24_vsS20$padj < 0.05 ), ]
# S24 vs N24
res_S24_vsN24 <- results(dds, contrast = c("group2", "S24", "N24"))
sig_S24_vsN24 <- res_S24_vsN24[ which(res_S24_vsN24$padj < 0.05 ), ]
# S20 vs N20
res_S20_vsN20 <- results(dds, contrast = c("group2", "S20", "N20"))
sig_S20_vsN20 <- res_S20_vsN20[ which(res_S20_vsN20$padj < 0.05 ), ]
plot.new()
plotMA(res_N24_vsN20, ylim=c(-2,2)) # do the same for the other contrasts
# Make a volcano plot
plot.new()
EnhancedVolcano(res_N24_vsN20,
lab = rownames(res_N24_vsN20),
x = 'log2FoldChange',
y = 'padj',
labSize = 1.5)
plot.new()
EnhancedVolcano(res_S24_vsN24,
lab = rownames(res_N24_vsN20),
x = 'log2FoldChange',
y = 'padj',
labSize = 1.5)
plot.new()
EnhancedVolcano(res_s24_vsS20,
lab = rownames(res_N24_vsN20),
x = 'log2FoldChange',
y = 'padj',
labSize = 1.5)
EnhancedVolcano(res_S24_vsS20,
lab = rownames(res_N24_vsN20),
x = 'log2FoldChange',
y = 'padj',
labSize = 1.5)
# Combine all unique differentially expressed genes (DEGs) for all contrasts
# (with unique = each DEG transcript ID occuring only once)
DEGs_N24_vsN20=rownames(sig_N24_vsN20)
DEGs_S24_vsS20=rownames(sig_S24_vsS20)
DEGs_S24_vsN24=rownames(sig_S24_vsN24)
DEGs_S20_vsN20=rownames(sig_S20_vsN20)
allDEGs<-c(DEGs_N24_vsN20,DEGs_S24_vsS20,DEGs_S24_vsN24,DEGs_S20_vsN20)
allDEGsUnique=unique(allDEGs)
select=allDEGsUnique
nt <- normTransform(dds) # defaults to log2(x+1)
log2.norm.counts <- assay(nt)[select,]
df <- as.data.frame(colData(dds)[,c("treat","lat","pop")])
pheatmap(log2.norm.counts, cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
# extract the names of the DEGs like this (do also for other contrasts)
write.table(DEGs_N24_vsN20, file="DEGs_N24_vsN20.txt", row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE)
write.table(DEGs_S20_vsN20, file="DEGs_S20_vsN20.txt", row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE)
write.table(DEGs_S24_vsN24, file="DEGs_S24_vsN24.txt", row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE)
write.table(DEGs_S24_vsS20, file="DEGs_S24_vsS20.txt", row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE)
# example
d <- plotCounts(dds, gene=which.min(res_N24_vsN20$padj), intgroup="group2",
returnData=TRUE)
ggplot(d, aes(x=group2, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
